package student_management_system.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

/**
 * Represents a single chat message sent within a specific SchoolClass.
 * Maps to the "chat_messages" table in the database.
 */
@Entity
@Table(name = "chat_messages")
@Getter
@Setter
@NoArgsConstructor
public class ChatMessage {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The content of the chat message.
     * Using TEXT type for potentially longer messages.
     */
    @Lob
    @Column(nullable = false, columnDefinition = "TEXT")
    private String content;

    /**
     * The timestamp when the message was sent. Defaults to current time.
     */
    @Column(nullable = false)
    private LocalDateTime timestamp = LocalDateTime.now();

    /**
     * The user (Student or Teacher) who sent the message.
     * Many messages can be sent by one user.
     */
    @ManyToOne(fetch = FetchType.LAZY) // EAGER fetching sender might be useful here for display
    @JoinColumn(name = "sender_id", nullable = false)
    private User sender;

    /**
     * The class (chat room) this message belongs to.
     * Many messages belong to one class.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "class_id", nullable = false)
    private SchoolClass schoolClass; // Renamed from classId to avoid confusion with field name

    // --- Optional: Message Type (e.g., CHAT, JOIN, LEAVE) ---
    // Could be an Enum if needed later for system messages
    // @Enumerated(EnumType.STRING)
    // @Column(length = 10)
    // private MessageType type;
    // public enum MessageType { CHAT, JOIN, LEAVE }

    // Constructor
    public ChatMessage(String content, User sender, SchoolClass schoolClass) {
        this.content = content;
        this.sender = sender;
        this.schoolClass = schoolClass;
    }

    // Getters and Setters generated by Lombok
}
